#include<bits/stdc++.h>
using namespace std;

int main()
{
	int n,i;
	cin>>n;

	long long a[n];
	for(i=0;i<n;i++)
		cin>>a[i];

	long long cumSum[n];
	cumSum[0]=a[0];

	for(i=1;i<n;i++)	                                                      //cumSum is cumulative sum of array elements
		cumSum[i]=cumSum[i-1]+a[i];

	int indexRem[n];	                                                      //Stores first occurence of a particular remainder when cumSum[i] is divided by n

	for(i=0;i<n;i++)
		indexRem[i]=-1;                                                       //indexRem[i] will store the index of the first occurence of remainder i. Remainder is obtained as cumSum[j]%n for all j for 0 to n-1

	for(i=0;i<n;i++)
	{
		int ind = cumSum[i]%n;
		if(indexRem[ind]==-1)
			indexRem[ind]=i;
	}


    if(indexRem[0]!=-1)                                                   //If some cumSum[i] gives rem 0, then it means the subarray from 0 to i is divisible by n
    {
            cout<<1<<" "<<indexRem[0]+1;
            return 0;
    }

	for(i=0;i<n;i++)                                                        //If there is no indexRem[0], then we can conclude that there are n cumSums and only n-1 possible remainders. Thus by PHP, at least two of them will have the same remainder. 
    {                                                                     //Let those two indexes be i and j. Then the subarray form index i+1 to j will be divisible by n  
		int ind = cumSum[i]%n;
		if(indexRem[ind]!=-1 && indexRem[ind]!=i)
		{
			cout<<indexRem[ind]+2<<" "<<i+1;
			
			break;
		}
	}
return 0;
}


