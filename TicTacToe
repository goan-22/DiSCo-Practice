#include<bits/stdc++.h>
using namespace std;

void displayBoard(char a[])
{


	cout<<"            "<<a[1]<<" "<<a[2]<<" "<<a[3]<<endl<<"            "<<a[4]<<" "<<a[5]<<" "<<a[6]<<endl<<"            "<<a[7]<<" "<<a[8]<<" "<<a[9]<<endl;
    cout<<"----------------------------------"<<endl;
}

void opponentPlay(char a[],char p)
{
    cout<<"Make your move"<<endl;
    int i;
    cin>>i;
    if(a[i]!='_')
    {
        cout<<"Make a valid move"<<endl;
        opponentPlay(a,p);
    }
    a[i]=p;
    cout<<"----------------------------------"<<endl;
    cout<<"You played:"<<endl;

}

int win(char a[],char p)
{

    if(a[1]==p && a[2]==p && a[3]==p)
        return 1;
    if(a[4]==p && a[5]==p && a[6]==p)
        return 1;
    if(a[7]==p && a[8]==p && a[9]==p)
        return 1;
    if(a[1]==p && a[4]==p && a[7]==p)
        return 1;
    if(a[2]==p && a[5]==p && a[8]==p)
        return 1;
    if(a[3]==p && a[6]==p && a[9]==p)
        return 1;
    if(a[1]==p && a[5]==p && a[9]==p)
        return 1;
    if(a[5]==p && a[3]==p && a[7]==p)
        return 1;


    else
        return 0;

}

int win_in_one(char a[],char p)
{
    int i,j;
    char b[11];
    for(i=0;i<10;i++)
        b[i]=a[i];
    for(i=1;i<10;i++)
    {
        for(j=0;j<11;j++)
            b[j]=a[j];
        if(b[i]=='_')
        {
            b[i]=p;
            if(win(b,p)==1)
            {
                a[i]=p;
                return 1;
            }
        }
    }
    return 0;
}
int defend_in_one(char a[],char p)
{
    int i,j,cnt=0;
    char b[11],notp;

    if(p=='x')
        notp='o';
    else
        notp='x';

    for(i=0;i<10;i++)
        b[i]=a[i];


    for(i=1;i<10;i++)
    {
        for(j=0;j<11;j++)
            b[j]=a[j];
        if(b[i]=='_')
        {
            b[i]=p;
            if(win_in_one(b,notp)==1)
            {
                cnt++;
            }
        }
    }
    if(cnt>0)
    {
        for(i=1;i<10;i++)
        {
            for(j=0;j<11;j++)
                b[j]=a[j];
            if(b[i]=='_')
            {
                b[i]=p;
                if(win_in_one(b,notp)==0)
                {
                    a[i]=p;
                    return 1;
                }
            }
        }
    }
    return 0;
}
int win_in_three(char a[],char p)
{
    int i,j;
    char b[11],notp;

    if(p=='x')
        notp='o';
    else
        notp='x';

    for(i=0;i<10;i++)
        b[i]=a[i];

    for(i=1;i<10;i++)
    {
        int cntblank=0,key=0;
        for(j=0;j<11;j++)
            b[j]=a[j];
        if(b[i]=='_')
        {
            b[i]=p;
                                int x,y;
                                char c[11];
                                for(x=0;x<10;x++)
                                    c[x]=b[x];
                                for(x=1;x<10;x++)
                                {
                                    for(y=0;y<11;y++)
                                        c[y]=b[y];
                                    if(c[x]=='_')
                                    {
                                        cntblank++;
                                        c[x]=notp;
                                        key=key+win_in_one(c,p);
                                    }
                                }
                                if(cntblank<3)
                                    return 0;
                                if(key==cntblank)
                                 {
                                    a[i]=p;
                                    return 1;
                                 }
        }
    }
    return 0;
}

int defend_in_three(char a[], char p)
{
    int i,j,cnt=0;
    char b[11],notp;

    if(p=='x')
        notp='o';
    else
        notp='x';

    for(i=0;i<10;i++)
        b[i]=a[i];


    for(i=1;i<10;i++)
    {
        for(j=0;j<11;j++)
            b[j]=a[j];
        if(b[i]=='_')
        {
            b[i]=p;
            if(win_in_three(b,notp)==1)
            {
                  cnt++;
            }
        }
    }

    if(cnt==0)
        return 0;

    int bestMove=0,cnt2=0;

        for(i=1;i<10;i++)
        {
            for(j=0;j<11;j++)
                b[j]=a[j];


            if(b[i]=='_')
            {
                b[i]=p;
                if(win_in_three(b,notp)==0)
                {
                    cnt2++;
                    bestMove=i;
                    if(win_in_one(b,p)==1)
                    {

                        a[i]=p;
                        return 1;
                    }

                }
            }
        }
        if(cnt2!=0)
        {
            a[bestMove]=p;
            return 1;
        }
        if(cnt2==0)
        {
            for(i=1;i<10;i++)
            {
                for(j=0;j<11;j++)
                    b[j]=a[j];


                if(b[i]=='_')
                {
                    b[i]=p;
                    if(win_in_one(b,p)==0)
                        continue;

                    defend_in_one(b,notp);
                    for(j=1;j<10;j++)
                    {
                        if(b[j]=='_')
                        {
                            b[j]=p;
                            if(win_in_one(b,notp))
                                continue;
                            else
                            {
                                a[i]=p;
                                return 1;
                            }
                        }
                    }


                }
            }
        }






}


void random(char a[],char p)
{
    int i,cnt=0,bestMove=0;
    char b[11],notp;

    if(p=='x')
        notp='o';
    else
        notp='x';

    for(i=0;i<10;i++)
        b[i]=a[i];

    for(i=1;i<10;i++)
    {
        if(b[i]=='_')
        {
            cnt=0;
            b[i]=p;

            if(win_in_three(b,p))
            {
                cnt++;
                bestMove=i;
            }
        }
    }
    if(bestMove!=0)
    {
        a[bestMove]=p;
        return ;
    }

    for(i=0;i<10;i++)
        b[i]=a[i];
    for(i=1;i<10;i++)
    {
        if(b[i]=='_')
        {
            cnt=0;
            b[i]=p;
            bestMove=i;
            if(win_in_one(b,p))
            {
                cnt++;
                bestMove=i;
            }
        }
    }



}

int main()
{
   	char board[11],p,notp;
	int i,empty=9;
	for(i=0;i<10;i++)
		board[i]='_';

    cout<<"TicTacToe@KevinBoban"<<endl<<" "<<endl<<"X to play first"<<endl;
    cout<<"Choose: X or O"<<endl;
    char opt;
    cin>>opt;

    cout<<"Format:"<<endl<<"1"<<"|"<<"2"<<"|"<<"3"<<endl<<"4"<<"|"<<"5"<<"|"<<"6"<<endl<<"7"<<"|"<<"8"<<"|"<<"9"<<endl;


    if(opt=='X')
    {
            p='o';
            notp='x';
            opponentPlay(board,notp);
            displayBoard(board);



            if(board[1]=='x' || board[3]=='x' || board[7]=='x' || board[9]=='x')
            {
                board[5]='o';
                displayBoard(board);
            }
            else if(board[5]=='x')
            {
                board[1]='o';
                displayBoard(board);
            }
            else
            {
                board[5]='o';
                displayBoard(board);
            }

            empty=7;
            while(empty>0)
            {
                if(empty%2==0)
                {
                    empty--;
                    if(win_in_one(board,'o'))
                    {
                        cout<<"O wins"<<endl;
                        cout<<"PC played:"<<endl;
                        displayBoard(board);
                        return 0;
                    }
                    if(defend_in_one(board,'o'))
                    {

                        cout<<"PC played:"<<endl;
                        displayBoard(board);

                        continue;
                    }
                    if(win_in_three(board,'o'))
                    {

                        cout<<"PC played:"<<endl;
                        displayBoard(board);
                        continue;
                    }
                    if(defend_in_three(board,'o'))
                    {


                        cout<<"PC played:"<<endl;
                        displayBoard(board);
                        continue;
                    }
                    else
                    {

                        random(board,'o');
                        displayBoard(board);
                    }
                }

                else
                {

                    opponentPlay(board,'x');
                    displayBoard(board);
                    empty--;
                }

            }
            cout<<"It's a Draw";
    }
    else
    {

        board[1]='x';
        empty--;
        cout<<"PC played:"<<endl;
        displayBoard(board);

        opponentPlay(board,'o');
        empty--;
        displayBoard(board);

        if(board[5]=='_')
        {
            board[5]='x';
            empty--;
            cout<<"PC played:"<<endl;
            displayBoard(board);
        }
        else
        {
            board[6]='x';
            empty--;
            cout<<"PC played:"<<endl;
            displayBoard(board);

            opponentPlay(board,'o');
            empty--;
            displayBoard(board);

            if(board[9]=='o')
            {
                board[8]='x';
                empty--;
                cout<<"PC played:"<<endl;
                displayBoard(board);
            }
        }


        while(empty>0)
        {
            if(empty%2==1)
            {
                empty--;
                if(win_in_one(board,'x'))
                {
                    cout<<"X wins"<<endl;
                    cout<<"PC played:"<<endl;
                    displayBoard(board);
                    return 0;
                }
                if(defend_in_one(board,'x'))
                {
                    cout<<"PC played:"<<endl;
                    displayBoard(board);

                    continue;
                }
                if(win_in_three(board,'x'))
                {
                    cout<<"PC played:"<<endl;
                    displayBoard(board);
                    continue;
                }
                else
                {
                    random(board,'x');
                    displayBoard(board);
                }
            }
            else
            {
                opponentPlay(board,'o');
                displayBoard(board);
                empty--;

            }
        }
        cout<<"It's a Draw";
        }
return 0;
}
